// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/equipment/equipment.proto

package protoEquipment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EquipmentService_Home_FullMethodName      = "/equipment.EquipmentService/Home"
	EquipmentService_Area_FullMethodName      = "/equipment.EquipmentService/Area"
	EquipmentService_Equipment_FullMethodName = "/equipment.EquipmentService/Equipment"
)

// EquipmentServiceClient is the client API for EquipmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EquipmentServiceClient interface {
	Home(ctx context.Context, in *HomeRQ, opts ...grpc.CallOption) (*ListHomeRP, error)
	Area(ctx context.Context, in *AreaRQ, opts ...grpc.CallOption) (*ListAreaRP, error)
	Equipment(ctx context.Context, in *EquipmentRQ, opts ...grpc.CallOption) (*ListEquimentRP, error)
}

type equipmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEquipmentServiceClient(cc grpc.ClientConnInterface) EquipmentServiceClient {
	return &equipmentServiceClient{cc}
}

func (c *equipmentServiceClient) Home(ctx context.Context, in *HomeRQ, opts ...grpc.CallOption) (*ListHomeRP, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHomeRP)
	err := c.cc.Invoke(ctx, EquipmentService_Home_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) Area(ctx context.Context, in *AreaRQ, opts ...grpc.CallOption) (*ListAreaRP, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAreaRP)
	err := c.cc.Invoke(ctx, EquipmentService_Area_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentServiceClient) Equipment(ctx context.Context, in *EquipmentRQ, opts ...grpc.CallOption) (*ListEquimentRP, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEquimentRP)
	err := c.cc.Invoke(ctx, EquipmentService_Equipment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EquipmentServiceServer is the server API for EquipmentService service.
// All implementations must embed UnimplementedEquipmentServiceServer
// for forward compatibility.
type EquipmentServiceServer interface {
	Home(context.Context, *HomeRQ) (*ListHomeRP, error)
	Area(context.Context, *AreaRQ) (*ListAreaRP, error)
	Equipment(context.Context, *EquipmentRQ) (*ListEquimentRP, error)
	mustEmbedUnimplementedEquipmentServiceServer()
}

// UnimplementedEquipmentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEquipmentServiceServer struct{}

func (UnimplementedEquipmentServiceServer) Home(context.Context, *HomeRQ) (*ListHomeRP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Home not implemented")
}
func (UnimplementedEquipmentServiceServer) Area(context.Context, *AreaRQ) (*ListAreaRP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Area not implemented")
}
func (UnimplementedEquipmentServiceServer) Equipment(context.Context, *EquipmentRQ) (*ListEquimentRP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Equipment not implemented")
}
func (UnimplementedEquipmentServiceServer) mustEmbedUnimplementedEquipmentServiceServer() {}
func (UnimplementedEquipmentServiceServer) testEmbeddedByValue()                          {}

// UnsafeEquipmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EquipmentServiceServer will
// result in compilation errors.
type UnsafeEquipmentServiceServer interface {
	mustEmbedUnimplementedEquipmentServiceServer()
}

func RegisterEquipmentServiceServer(s grpc.ServiceRegistrar, srv EquipmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedEquipmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EquipmentService_ServiceDesc, srv)
}

func _EquipmentService_Home_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeRQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).Home(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipmentService_Home_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).Home(ctx, req.(*HomeRQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_Area_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaRQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).Area(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipmentService_Area_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).Area(ctx, req.(*AreaRQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentService_Equipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipmentRQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServiceServer).Equipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipmentService_Equipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServiceServer).Equipment(ctx, req.(*EquipmentRQ))
	}
	return interceptor(ctx, in, info, handler)
}

// EquipmentService_ServiceDesc is the grpc.ServiceDesc for EquipmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EquipmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "equipment.EquipmentService",
	HandlerType: (*EquipmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Home",
			Handler:    _EquipmentService_Home_Handler,
		},
		{
			MethodName: "Area",
			Handler:    _EquipmentService_Area_Handler,
		},
		{
			MethodName: "Equipment",
			Handler:    _EquipmentService_Equipment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/equipment/equipment.proto",
}
