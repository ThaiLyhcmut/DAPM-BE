// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"ThaiLy/graph/model"
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	AreaQuery() AreaQueryResolver
	HomeQuery() HomeQueryResolver
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Account struct {
		Email    func(childComplexity int) int
		FullName func(childComplexity int) int
		ID       func(childComplexity int) int
		Phone    func(childComplexity int) int
		Token    func(childComplexity int) int
	}

	Area struct {
		HomeID func(childComplexity int) int
		ID     func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	AreaQuery struct {
		Equipment func(childComplexity int) int
		HomeID    func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	Equipment struct {
		AreaID      func(childComplexity int) int
		CategoryID  func(childComplexity int) int
		Cycle       func(childComplexity int) int
		Description func(childComplexity int) int
		HomeID      func(childComplexity int) int
		ID          func(childComplexity int) int
		Status      func(childComplexity int) int
		TimeEnd     func(childComplexity int) int
		TimeStart   func(childComplexity int) int
		Title       func(childComplexity int) int
		TurnOn      func(childComplexity int) int
	}

	Home struct {
		AccountID func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Deleted   func(childComplexity int) int
		HomeName  func(childComplexity int) int
		ID        func(childComplexity int) int
		Location  func(childComplexity int) int
	}

	HomeQuery struct {
		AccountID func(childComplexity int) int
		Area      func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Deleted   func(childComplexity int) int
		HomeName  func(childComplexity int) int
		ID        func(childComplexity int) int
		Location  func(childComplexity int) int
	}

	Mutation struct {
		CreateArea      func(childComplexity int, area model.CreateArea) int
		CreateEquiment  func(childComplexity int, equipment model.CreateEquiment) int
		CreateHome      func(childComplexity int, home model.CreateHome) int
		DeleteArea      func(childComplexity int, area model.DeleteArea) int
		DeleteEquipment func(childComplexity int, equipment model.DeleteEquipment) int
		DeleteHome      func(childComplexity int, home model.DeleteHome) int
		EditArea        func(childComplexity int, area model.EditArea) int
		EidtHome        func(childComplexity int, home model.EditHome) int
		LoginAccount    func(childComplexity int, account model.LoginAccount) int
		RegisterAccount func(childComplexity int, account model.RegisterAccount) int
	}

	Query struct {
		GetHome      func(childComplexity int) int
		InforAccount func(childComplexity int) int
	}

	Response struct {
		Code func(childComplexity int) int
		Msg  func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Account.email":
		if e.complexity.Account.Email == nil {
			break
		}

		return e.complexity.Account.Email(childComplexity), true

	case "Account.fullName":
		if e.complexity.Account.FullName == nil {
			break
		}

		return e.complexity.Account.FullName(childComplexity), true

	case "Account.id":
		if e.complexity.Account.ID == nil {
			break
		}

		return e.complexity.Account.ID(childComplexity), true

	case "Account.phone":
		if e.complexity.Account.Phone == nil {
			break
		}

		return e.complexity.Account.Phone(childComplexity), true

	case "Account.token":
		if e.complexity.Account.Token == nil {
			break
		}

		return e.complexity.Account.Token(childComplexity), true

	case "Area.homeId":
		if e.complexity.Area.HomeID == nil {
			break
		}

		return e.complexity.Area.HomeID(childComplexity), true

	case "Area.id":
		if e.complexity.Area.ID == nil {
			break
		}

		return e.complexity.Area.ID(childComplexity), true

	case "Area.name":
		if e.complexity.Area.Name == nil {
			break
		}

		return e.complexity.Area.Name(childComplexity), true

	case "AreaQuery.equipment":
		if e.complexity.AreaQuery.Equipment == nil {
			break
		}

		return e.complexity.AreaQuery.Equipment(childComplexity), true

	case "AreaQuery.homeId":
		if e.complexity.AreaQuery.HomeID == nil {
			break
		}

		return e.complexity.AreaQuery.HomeID(childComplexity), true

	case "AreaQuery.id":
		if e.complexity.AreaQuery.ID == nil {
			break
		}

		return e.complexity.AreaQuery.ID(childComplexity), true

	case "AreaQuery.name":
		if e.complexity.AreaQuery.Name == nil {
			break
		}

		return e.complexity.AreaQuery.Name(childComplexity), true

	case "Equipment.areaId":
		if e.complexity.Equipment.AreaID == nil {
			break
		}

		return e.complexity.Equipment.AreaID(childComplexity), true

	case "Equipment.categoryId":
		if e.complexity.Equipment.CategoryID == nil {
			break
		}

		return e.complexity.Equipment.CategoryID(childComplexity), true

	case "Equipment.cycle":
		if e.complexity.Equipment.Cycle == nil {
			break
		}

		return e.complexity.Equipment.Cycle(childComplexity), true

	case "Equipment.description":
		if e.complexity.Equipment.Description == nil {
			break
		}

		return e.complexity.Equipment.Description(childComplexity), true

	case "Equipment.homeId":
		if e.complexity.Equipment.HomeID == nil {
			break
		}

		return e.complexity.Equipment.HomeID(childComplexity), true

	case "Equipment.id":
		if e.complexity.Equipment.ID == nil {
			break
		}

		return e.complexity.Equipment.ID(childComplexity), true

	case "Equipment.status":
		if e.complexity.Equipment.Status == nil {
			break
		}

		return e.complexity.Equipment.Status(childComplexity), true

	case "Equipment.timeEnd":
		if e.complexity.Equipment.TimeEnd == nil {
			break
		}

		return e.complexity.Equipment.TimeEnd(childComplexity), true

	case "Equipment.timeStart":
		if e.complexity.Equipment.TimeStart == nil {
			break
		}

		return e.complexity.Equipment.TimeStart(childComplexity), true

	case "Equipment.title":
		if e.complexity.Equipment.Title == nil {
			break
		}

		return e.complexity.Equipment.Title(childComplexity), true

	case "Equipment.turnOn":
		if e.complexity.Equipment.TurnOn == nil {
			break
		}

		return e.complexity.Equipment.TurnOn(childComplexity), true

	case "Home.accountId":
		if e.complexity.Home.AccountID == nil {
			break
		}

		return e.complexity.Home.AccountID(childComplexity), true

	case "Home.createdAt":
		if e.complexity.Home.CreatedAt == nil {
			break
		}

		return e.complexity.Home.CreatedAt(childComplexity), true

	case "Home.deleted":
		if e.complexity.Home.Deleted == nil {
			break
		}

		return e.complexity.Home.Deleted(childComplexity), true

	case "Home.homeName":
		if e.complexity.Home.HomeName == nil {
			break
		}

		return e.complexity.Home.HomeName(childComplexity), true

	case "Home.id":
		if e.complexity.Home.ID == nil {
			break
		}

		return e.complexity.Home.ID(childComplexity), true

	case "Home.location":
		if e.complexity.Home.Location == nil {
			break
		}

		return e.complexity.Home.Location(childComplexity), true

	case "HomeQuery.accountId":
		if e.complexity.HomeQuery.AccountID == nil {
			break
		}

		return e.complexity.HomeQuery.AccountID(childComplexity), true

	case "HomeQuery.area":
		if e.complexity.HomeQuery.Area == nil {
			break
		}

		return e.complexity.HomeQuery.Area(childComplexity), true

	case "HomeQuery.createdAt":
		if e.complexity.HomeQuery.CreatedAt == nil {
			break
		}

		return e.complexity.HomeQuery.CreatedAt(childComplexity), true

	case "HomeQuery.deleted":
		if e.complexity.HomeQuery.Deleted == nil {
			break
		}

		return e.complexity.HomeQuery.Deleted(childComplexity), true

	case "HomeQuery.homeName":
		if e.complexity.HomeQuery.HomeName == nil {
			break
		}

		return e.complexity.HomeQuery.HomeName(childComplexity), true

	case "HomeQuery.id":
		if e.complexity.HomeQuery.ID == nil {
			break
		}

		return e.complexity.HomeQuery.ID(childComplexity), true

	case "HomeQuery.location":
		if e.complexity.HomeQuery.Location == nil {
			break
		}

		return e.complexity.HomeQuery.Location(childComplexity), true

	case "Mutation.createArea":
		if e.complexity.Mutation.CreateArea == nil {
			break
		}

		args, err := ec.field_Mutation_createArea_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateArea(childComplexity, args["area"].(model.CreateArea)), true

	case "Mutation.createEquiment":
		if e.complexity.Mutation.CreateEquiment == nil {
			break
		}

		args, err := ec.field_Mutation_createEquiment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEquiment(childComplexity, args["equipment"].(model.CreateEquiment)), true

	case "Mutation.createHome":
		if e.complexity.Mutation.CreateHome == nil {
			break
		}

		args, err := ec.field_Mutation_createHome_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateHome(childComplexity, args["home"].(model.CreateHome)), true

	case "Mutation.deleteArea":
		if e.complexity.Mutation.DeleteArea == nil {
			break
		}

		args, err := ec.field_Mutation_deleteArea_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteArea(childComplexity, args["area"].(model.DeleteArea)), true

	case "Mutation.deleteEquipment":
		if e.complexity.Mutation.DeleteEquipment == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEquipment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEquipment(childComplexity, args["equipment"].(model.DeleteEquipment)), true

	case "Mutation.deleteHome":
		if e.complexity.Mutation.DeleteHome == nil {
			break
		}

		args, err := ec.field_Mutation_deleteHome_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteHome(childComplexity, args["home"].(model.DeleteHome)), true

	case "Mutation.editArea":
		if e.complexity.Mutation.EditArea == nil {
			break
		}

		args, err := ec.field_Mutation_editArea_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditArea(childComplexity, args["area"].(model.EditArea)), true

	case "Mutation.eidtHome":
		if e.complexity.Mutation.EidtHome == nil {
			break
		}

		args, err := ec.field_Mutation_eidtHome_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EidtHome(childComplexity, args["home"].(model.EditHome)), true

	case "Mutation.LoginAccount":
		if e.complexity.Mutation.LoginAccount == nil {
			break
		}

		args, err := ec.field_Mutation_LoginAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LoginAccount(childComplexity, args["account"].(model.LoginAccount)), true

	case "Mutation.registerAccount":
		if e.complexity.Mutation.RegisterAccount == nil {
			break
		}

		args, err := ec.field_Mutation_registerAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterAccount(childComplexity, args["account"].(model.RegisterAccount)), true

	case "Query.getHome":
		if e.complexity.Query.GetHome == nil {
			break
		}

		return e.complexity.Query.GetHome(childComplexity), true

	case "Query.inforAccount":
		if e.complexity.Query.InforAccount == nil {
			break
		}

		return e.complexity.Query.InforAccount(childComplexity), true

	case "Response.code":
		if e.complexity.Response.Code == nil {
			break
		}

		return e.complexity.Response.Code(childComplexity), true

	case "Response.msg":
		if e.complexity.Response.Msg == nil {
			break
		}

		return e.complexity.Response.Msg(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCreateArea,
		ec.unmarshalInputCreateEquiment,
		ec.unmarshalInputCreateHome,
		ec.unmarshalInputDeleteArea,
		ec.unmarshalInputDeleteEquipment,
		ec.unmarshalInputDeleteHome,
		ec.unmarshalInputEditArea,
		ec.unmarshalInputEditHome,
		ec.unmarshalInputLoginAccount,
		ec.unmarshalInputRegisterAccount,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/auth.graphqls", Input: `type Account {
  id: Int
  fullName: String
  email: String
  phone: String
  token: String
}

input LoginAccount {
  email: String!
  password: String!
}

input RegisterAccount {
  fullName: String!
  email: String!
  password: String!
  phone: String!
  otp: String
}

`, BuiltIn: false},
	{Name: "../schema/equipment.graphqls", Input: `type Home {
  id: Int!
  accountId: Int
  homeName: String
  location: String
  deleted: Boolean
  createdAt: String
}

type HomeQuery {
  id: Int!
  accountId: Int
  homeName: String
  location: String
  deleted: Boolean
  createdAt: String
  area: [AreaQuery]!
}

type Area {
  id: Int
  homeId: Int
  name: String
}

type AreaQuery {
  id: Int
  homeId: Int
  name: String
  equipment: [Equipment]
}

type Equipment {
  id: Int
  categoryId: Int
  homeId: Int
  areaId: Int
  title: String
  description: String
  timeStart: String
  timeEnd: String
  turnOn: Boolean
  cycle: Int
  status: String
}


type Response {
  code: String
  msg: String
}

input CreateHome {
  homeName: String!
  location: String!
}

input CreateArea {
  homeId: Int!
  name: String!
}

input CreateEquiment {
  categoryId: Int!
  homeId: Int!
  title: String!
  description: String
  status: String!
}

input DeleteHome {
  id: Int!
}

input DeleteArea {
  id: Int!
}

input DeleteEquipment {
  id: Int!
}

input EditHome {
  id: Int!
  homeName: String!
  location: String!
  deleted: Boolean!
}

input EditArea {
  id: Int!
  homeId: Int!
  name: String!
}

`, BuiltIn: false},
	{Name: "../schema/schema.graphqls", Input: `type Mutation {
  registerAccount(account: RegisterAccount!): Account
  LoginAccount(account: LoginAccount!): Account
  createHome(home: CreateHome!): Home
  createArea(area: CreateArea!): Area
  createEquiment(equipment: CreateEquiment!): Equipment
  deleteHome(home: DeleteHome!): Response
  deleteArea(area: DeleteArea!): Response
  deleteEquipment(equipment: DeleteEquipment!): Response
  eidtHome(home: EditHome!): Home
  editArea(area: EditArea!): Area
}

type Query {
  getHome: [HomeQuery]
  inforAccount: Account
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
